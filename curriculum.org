* McCarthy Posse Intro to Clojure Curriculum
** Intro
This document contains a recommended outline for digging into your first few weeks of Clojure. This is by no means an exhaustive or authoritative list of all the great Clojure resources out there, but we've tried to pull together a combination of readings and exercises from various sources that will complement one another and give a decent tour of the fundamentals of the language.

This selection is aimed at Turing students learning Clojure as part of the McCarthy Posse at Turing, and as such we've given a rough timeline for working through the materials over the course of a single 6-week module. The aim here is to spend a module getting comfortable with the basics of the language and then be able to dive into more ambitious self-directed projects in the next module.
** Resources
*** Clojure for the Brave and True
[[http://www.braveclojure.com/clojure-for-the-brave-and-true/][Clojure for the Brave and True]] is a popular beginner's resource for learning Clojure. It takes the format of a full-length book packed with lots of code samples and hands-on tutorials, and is written in a very conversational and approachable tone. Perhaps best of all it's available free online! Our curriculum will pick some specific chapters from the book which give a good overview of Clojure's fundamentals.
*** Clojure Koans
The term "Koan" comes from the Buddhist religious tradition where it refers to a short statement or precept designed to provoke contemplation and learning. The idea has been adopted in the programming community where it often refers to a short programming exercise or example intended to concisely demonstrate a point. Programming Koans are often used as a way to teach a new programming language by illustrating its core concepts and building blocks with short pieces of code.

You can find a great list of programming koans for various languages [[http://www.lauradhamilton.com/learn-a-new-programming-language-today-with-koans][here]].

Language Koans can be presented simply as short snippets of code for the reader to ponder over, but they're also frequently implemented more interactively using automated tests (this is the technique introduced by Edge Case's original set of [[http://rubykoans.com/][Ruby Koans]]). The [[https://github.com/functional-koans/clojure-koans][Clojure Koans]] we'll be following use this approach to teach you about some of the language's fundamentals.
*** Clojure Exercisms
Exercism is the last tool we'll be relying on during our initial guided exploration. Reading about a programming langugage is all well and good but ultimately the best way to learn is by doing. For each section of the curriculum we'll recommend a handful of exercism exercises that will give you some practice with the concepts you've covered.

If you haven't used Exercism before, you can set it up by following the instructions [[http://cli.exercism.io/][here]].

Once you have that setup, you can fetch new exercisms like so:

#+BEGIN_SRC sh
exercism fetch clojure <exercise-name>
# for example:
exercism fetch clojure anagram
#+END_SRC

** Setup
*** Option 1 -- Using Atom
Atom isn't super well known for editing Clojure but it actually works pretty well for this purpose. Check out the packages and instructions included in [[http://worace.works/2016/06/14/good-enough-clojure-setup/][this blog post]] to set up your Atom environment to work with Clojure.
*** Option 2 -- Using Emacs (Coming One Day)
** Recommended Progression
*** Week 1 and 2
The first 2 weeks is focused on getting comfortable with Clojure fundamentals including the built-in data structures and the basics of defining and working with functions. To get started, work through these things:

**** Reading
Clojure for the Brave and True: Read [[http://www.braveclojure.com/do-things/][Chapter 3]]. This chapter covers Clojure basics including syntax, built-in data types, and working with functions.
**** Clojure Koans
Try to work through Koans 1 - 6 (equalities, strings, vectors, maps, sets).
**** Recommended 4clojure Exercises
These short exercises make great comprehension checks to get more hands-on practice as you read:
 * Exercises [[http://www.4clojure.com/problem/1][1]], [[http://www.4clojure.com/problem/2][2]], [[http://www.4clojure.com/problem/3][3]], [[http://www.4clojure.com/problem/4][4]], [[http://www.4clojure.com/problem/5][5]], [[http://www.4clojure.com/problem/6][6]], [[http://www.4clojure.com/problem/7][7]], [[http://www.4clojure.com/problem/8][8]], [[http://www.4clojure.com/problem/9][9]], [[http://www.4clojure.com/problem/10][10]], [[http://www.4clojure.com/problem/11][11]], [[http://www.4clojure.com/problem/12][12]], [[http://www.4clojure.com/problem/13][13]], [[http://www.4clojure.com/problem/14][14]], [[http://www.4clojure.com/problem/15][15]], [[http://www.4clojure.com/problem/16][16]], [[http://www.4clojure.com/problem/17][17]], [[http://www.4clojure.com/problem/18][18]], [[http://www.4clojure.com/problem/19][19]], [[http://www.4clojure.com/problem/35][35]], and [[http://www.4clojure.com/problem/36][36]].
**** Recommended Exercisms
 * Hello World
 * Anagram
 * Phone Number
*** Week 3 and 4
Next, we'll start working with more complex data structures and functions. In particular, we want to start getting comfortable with Clojure's collection data structures (especially maps and vectors), and with the numerous sequence processing functions that work with them (Map, Filter, Reduce, Group By, etc etc). Performing complex manipulations using collections and higher-order functions is an area where Clojure really shines, so getting comfortable with these tools is an essential step toward becoming proficient with the language.
**** Reading
 * Clojure for the Brave and True: Read [[http://www.braveclojure.com/core-functions-in-depth/][Chapter 4]]
**** Clojure Koans
 Do Koans 7 - 9 (functions, conditionals, higher order functions).
**** Recommended Exercisms
These Exercisms give you a good opportunity to work with Clojure's sequence data types and functions:
 * RNA Transcription
 * Hamming
 * Word Count
 * Nucleotide Count
*** Week 5 and 6
Now that we've taken a tour of some of the language's fundamentals, we're ready to dive into a slightly more sophisticated project. This last 2 weeks focuses on tackling the "Alphabet Cipher" exercise from Carin Meier's [[https://github.com/gigasquid/wonderland-clojure-katas/tree/master/alphabet-cipher][Wonderland Clojure Katas]]. The exercise is more complex than the exercisms we've been working on so far, although not by an insurmountable margin. Solving it will require us to combine several of the tools we've learned about so far.

Additionally, this is a good time to start looking at some of the more common idioms we might encounter in normal Clojure code. A great place to start with this task is the "Threading Macro", which is frequently used to clean up some of the deep function nesting we sometimes encounter in Lisp code.
**** Reading
 * Clojure for the Brave and True: Read [[http://www.braveclojure.com/functional-programming/][Chapter 5]]
 * Clojure Idioms: Threading Macros -- Read [[http://clojure.org/guides/threading_macros][this post]]
**** Mini-Project
Now that we've got some Exercisms and Koans under our belt, let's try taking on a slightly larger challenge by working through the [[https://github.com/gigasquid/wonderland-clojure-katas/tree/master/alphabet-cipher][Alphabet Cipher Clojure Kata]].
